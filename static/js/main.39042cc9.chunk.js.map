{"version":3,"sources":["redux/types.js","components/Styles.js","components/showData.js","components/ClientBlock.js","redux/actions.js","components/NewDeclartant.js","components/DeclarantsBlock.js","App.js","redux/sagas.js","reportWebVitals.js","redux/reducers/clientsReducer.js","redux/reducers/declarantsReducer.js","redux/reducers/rootReducer.js","index.js"],"names":["REQUEST_ClIENTS","FETCH_ClIENTS","SET_CURRENT_ClIENT","REQUEST_DECLARANTS","FETCH_DECLARANTS","UPDATE_NEW_DECLARANTS_ARRAY","PUSH_NEW_DECLARANT","UPDATE_CURRENT_NEW_DECLARANT","useStyles","makeStyles","theme","root","display","flexGrow","clientBlock","marginTop","spacing","padding","background","submitBtn","declarantsBlock","marginBottom","Button","margin","Input","marginLeft","InputsBox","InputBox","flexDirection","width","showData","client","declarants","newDeclarants","clientId","id","applicantsIds","length","map","declarant","newApplicants","console","log","ClientBlock","clientData","classes","dispatch","useDispatch","clients","useSelector","state","autocompleteHandler","value","type","payload","setCurrentClient","Box","Typography","variant","name","phone","email","onClick","className","color","href","Container","maxWidth","Autocomplete","onInputChange","event","newInputValue","onChange","newValue","options","getOptionLabel","option","autoComplete","style","renderInput","params","TextField","label","NewDeclartant","AdditionalBlock","form","visibleForm","setVisibleForm","useState","country","currentCountry","setCurrentCountry","businessEntity","edrpou","title","adress","motherlandTitle","motherlandAdress","setDeclarant","handleSubmit","updateNewDeclarantsArray","pushNewDeclarant","handleInputChange","target","checked","updateNewCurrentDeclarant","fullWidth","noValidate","onSubmit","FormControl","component","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","DeclarantsBlock","renderDeclarants","index","Checkbox","fontSize","App","currentClient","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","currentNewDerclarant","rootReducer","combineReducers","action","concat","getClientState","mySaga","clientsWorker","declarantsWorker","data","takeEvery","call","fetchClients","put","a","fetch","method","headers","responce","json","clientsItems","items","select","fetchDeclarants","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","app","run","render","document","getElementById"],"mappings":"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","file":"static/js/main.39042cc9.chunk.js","sourcesContent":["export const REQUEST_ClIENTS = 'REQUEST_ClIENTS'\r\nexport const FETCH_ClIENTS = 'FETCH_ClIENTS'\r\nexport const SET_CURRENT_ClIENT = 'SET_CURRENT_ClIENT'\r\nexport const REQUEST_DECLARANTS = 'REQUEST_DECLARANTS'\r\nexport const FETCH_DECLARANTS = 'FETCH_DECLARANTS'\r\nexport const UPDATE_NEW_DECLARANTS_ARRAY = 'UPDATE_NEW_DECLARANTS_ARRAY'\r\nexport const PUSH_NEW_DECLARANT = 'PUSH_NEW_DECLARANT'\r\nexport const UPDATE_CURRENT_NEW_DECLARANT = 'UPDATE_CURRENT_NEW_DECLARANT'\r\n\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexGrow: 1\r\n  },\r\n  clientBlock: {\r\n    marginTop: theme.spacing(2),\r\n    padding: theme.spacing(3),\r\n    flexGrow: 1,\r\n    background: 'white'\r\n  },\r\n  submitBtn: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  declarantsBlock: {\r\n    marginTop: theme.spacing(2),\r\n    marginBottom: theme.spacing(2),\r\n    padding: theme.spacing(3),\r\n    flexGrow: 1,\r\n    background: 'white'\r\n  },\r\n  Button: {\r\n    margin: theme.spacing(2, 0),\r\n  }, \r\n  Input: {\r\n    flexGrow: 1,\r\n    margin: theme.spacing(1),\r\n    marginLeft: 0\r\n  },\r\n\r\n  InputsBox: {\r\n    flexGrow: 1,\r\n    display: 'flex',\r\n  },\r\n  InputBox: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    width: '50%',\r\n  }\r\n}));","export function showData(client, declarants, newDeclarants) {\r\n  const clientId = client ? client.id : 'No Selected'\r\n  const applicantsIds = declarants.length ? declarants.map(declarant => declarant.id) : 'No Client Selected Yet'\r\n  const newApplicants = (newDeclarants.length > 0) ? newDeclarants : 'No One Added Yet'\r\n\r\n  console.log('\\nclientId: ', clientId, '\\napplicantsIds: ', applicantsIds, '\\nnewApplicants: ', newApplicants)\r\n}","import React from 'react';\r\nimport {TextField, Container, Typography, Box} from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {FETCH_ClIENTS, FETCH_DECLARANTS} from '../redux/types'\r\n\r\nimport {getClients, setCurrentClient, getDeclarants} from '../redux/actions';\r\nimport {useStyles} from './Styles';\r\nimport {showData} from './showData'\r\n\r\nfunction ClientBlock() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch()\r\n  const clients = useSelector((state) => state.clients.clients)\r\n  const client = useSelector((state) => state.clients.client)\r\n  const declarants = useSelector((state) => state.declarants.declarants)\r\n  const newDeclarants = useSelector((state) => state.declarants.newDeclarants)\r\n  \r\n  const saveHandler = () => {\r\n    showData(client, declarants, newDeclarants)\r\n  }\r\n\r\n  const autocompleteHandler = (value) => {\r\n    dispatch(setCurrentClient(value))\r\n    if (value) {\r\n      dispatch(getDeclarants())\r\n    }\r\n  }\r\n\r\n  let clientData;\r\n  if (client) {\r\n    clientData = \r\n      <Box>\r\n        <Typography variant=\"body2\">ФІО: {client.name}</Typography>\r\n        <Typography variant=\"body2\">Телефон: {client.phone}</Typography>\r\n        <Typography variant=\"body2\">Email: {client.email}</Typography>\r\n        <Box>\r\n          <Button onClick={saveHandler} className={classes.submitBtn} variant=\"contained\" color=\"primary\" href=\"#contained-buttons\">\r\n            Зберігти заявку\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    \r\n  } else {\r\n    clientData = null\r\n  }\r\n  \r\n  return (\r\n    <div className={classes.root} >\r\n    <Container maxWidth=\"md\" className={classes.clientBlock} >\r\n      <Typography variant=\"h4\">Кліент</Typography>\r\n      <Autocomplete\r\n        onInputChange={(event, newInputValue) => {\r\n          if (newInputValue.length >= 3) {\r\n            dispatch(getClients())\r\n          } else {\r\n            dispatch({ type: FETCH_ClIENTS, payload: [] })\r\n            dispatch({ type: FETCH_DECLARANTS, payload: [] })\r\n          }\r\n        }}\r\n        onChange={(event, newValue) => {\r\n          autocompleteHandler(newValue)\r\n        }}\r\n        id=\"auto-complete\"\r\n        options={clients.length >= 1 ? clients : []}\r\n        getOptionLabel={(option) => option.name}\r\n        autoComplete\r\n        style={{ width: 300 }}\r\n        renderInput={(params) => <TextField {...params} label=\"Customer Search / Selection\" margin=\"normal\" />}\r\n      /> \r\n\r\n      {clientData}\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClientBlock;\r\n","import { REQUEST_ClIENTS, SET_CURRENT_ClIENT, REQUEST_DECLARANTS, UPDATE_CURRENT_NEW_DECLARANT, PUSH_NEW_DECLARANT, UPDATE_NEW_DECLARANTS_ARRAY } from \"./types\"\r\n\r\nexport function getClients() {\r\n  return {\r\n    type: REQUEST_ClIENTS\r\n  }\r\n}\r\n\r\nexport function setCurrentClient(client) {\r\n  return {\r\n    type: SET_CURRENT_ClIENT,\r\n    payload: client\r\n  }\r\n}\r\n\r\nexport function getDeclarants() {\r\n  return {\r\n    type: REQUEST_DECLARANTS\r\n  }\r\n}\r\n\r\nexport function updateNewCurrentDeclarant(declarant) {\r\n  return {\r\n    type: UPDATE_CURRENT_NEW_DECLARANT,\r\n    payload: declarant\r\n  }\r\n}\r\n\r\nexport function pushNewDeclarant(declarant) {\r\n  return {\r\n    type: PUSH_NEW_DECLARANT,\r\n    payload: declarant\r\n  }\r\n}\r\n\r\nexport function updateNewDeclarantsArray(declarant) {\r\n  return {\r\n    type: UPDATE_NEW_DECLARANTS_ARRAY,\r\n    payload: declarant\r\n  }\r\n}","import {Container, Box, TextField, FormControl, FormLabel, RadioGroup, FormControlLabel, Radio, Button } from '@material-ui/core';\r\nimport React, {useState} from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport {useStyles} from './Styles';\r\nimport {useDispatch} from 'react-redux'\r\nimport {updateNewCurrentDeclarant, pushNewDeclarant, updateNewDeclarantsArray} from '../redux/actions'\r\n\r\nexport default function NewDeclartant({visibleForm, setVisibleForm}) {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch()\r\n  const [country, setCountry] = useState(['Украина', 'Грузия', 'Казахстан']);\r\n  const [currentCountry, setCurrentCountry] = useState();\r\n  const [declarant, setDeclarant] = useState({\r\n    businessEntity: '', \r\n    country: '', \r\n    name: '', \r\n    edrpou: '', \r\n    title: '', \r\n    adress: '', \r\n    motherlandTitle: '', \r\n    motherlandAdress: ''}\r\n  );\r\n\r\n  const handleSubmit = () => {\r\n    dispatch(updateNewDeclarantsArray(declarant))\r\n    dispatch(pushNewDeclarant(declarant))\r\n    setVisibleForm()\r\n  }\r\n\r\n  const handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    setDeclarant({...declarant, [name]: value})\r\n    dispatch(updateNewCurrentDeclarant(declarant))\r\n  }\r\n\r\n  let AdditionalBlock;\r\n  if (currentCountry !== 'Украина') {\r\n    AdditionalBlock = \r\n    <Box className={classes.InputBox}>\r\n      <TextField value={declarant.motherlandTitle} onChange={handleInputChange} name=\"motherlandTitle\" fullWidth className={classes.Input} id=\"outlined-basic\" label=\"Назва мовою походження\" variant=\"outlined\" />\r\n      <TextField value={declarant.motherlandAdress} onChange={handleInputChange} name=\"motherlandAdress\" fullWidth className={classes.Input} id=\"outlined-basic\" label=\"Адреса мовою походження\" variant=\"outlined\" />\r\n    </Box>\r\n  } else {\r\n    AdditionalBlock = null\r\n  }\r\n\r\n  let form;\r\n  if (visibleForm) {\r\n    form =\r\n    <>\r\n      <form noValidate onSubmit={handleSubmit}>\r\n      <FormControl component=\"fieldset\">\r\n        <FormLabel component=\"legend\">Додати нового</FormLabel>\r\n        <RadioGroup aria-label=\"businessEntity\" onChange={handleInputChange} name=\"businessEntity\" >\r\n          <FormControlLabel value=\"Private person\" control={<Radio  color=\"primary\"/>} label=\"Фізична особа\" />\r\n          <FormControlLabel value=\"Legal person\" control={<Radio  color=\"primary\"/>} label=\"Юридична особа\" />\r\n        </RadioGroup>\r\n      </FormControl>\r\n      <Container>\r\n        <Box>\r\n          <Autocomplete\r\n            onChange={(event, newValue) => {\r\n              setCurrentCountry(newValue)\r\n            }}\r\n            name=\"country\"\r\n            id=\"auto-complete\"\r\n            options={country}\r\n            getOptionLabel={(option) => option}\r\n            autoComplete\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"Оберіть країну\" margin=\"normal\" />}\r\n          /> \r\n        </Box>\r\n        \r\n          <TextField value={declarant.name} onChange={handleInputChange} name=\"name\" fullWidth width='2' className={classes.Input} id=\"outlined-basic\" label=\"Ім'я\" variant=\"outlined\" />\r\n          <TextField value={declarant.edrpou} onChange={handleInputChange} name=\"edrpou\" fullWidth className={classes.Input} id=\"outlined-basic\" label=\"ЄДРПОУ\" variant=\"outlined\" />\r\n            <Box  className={classes.InputsBox}>\r\n              <Box  className={classes.InputBox}>\r\n                <TextField value={declarant.title} onChange={handleInputChange} className={classes.Input} name=\"title\" id=\"outlined-basic\" label=\"Назва\" variant=\"outlined\" />\r\n                <TextField value={declarant.adress} onChange={handleInputChange}  className={classes.Input} name=\"adress\" id=\"outlined-basic\" label=\"Адреса\" variant=\"outlined\" />\r\n              </Box>\r\n              {AdditionalBlock}\r\n            </Box>\r\n        </Container>\r\n        <Button onClick={handleSubmit}>Додати</Button>\r\n      </form>\r\n    </>\r\n  } else {\r\n    form = null\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {form}\r\n    </>\r\n  )\r\n}","import React, {useState} from 'react';\r\nimport {FormControlLabel, Checkbox, Container, Typography, Box} from '@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Button from '@material-ui/core/Button';\r\nimport {useSelector} from 'react-redux'\r\n\r\nimport NewDeclartant from './NewDeclartant'\r\nimport {useStyles} from './Styles';\r\nimport {showData} from './showData'\r\n\r\n\r\nfunction DeclarantsBlock() {\r\n  const classes = useStyles();\r\n  const [visibleForm, setVisibleForm] = useState(false);\r\n  const client = useSelector((state) => state.clients.client)\r\n  const declarants = useSelector((state) => state.declarants.declarants)\r\n  const newDeclarants = useSelector((state) => state.declarants.newDeclarants)\r\n  \r\n  const saveHandler = () => {\r\n    showData(client, declarants, newDeclarants)\r\n  }\r\n\r\n  let renderDeclarants;\r\n  if (declarants.length !== 0) {\r\n    renderDeclarants = declarants.map((declarant, index) => {\r\n      return (\r\n      <Box key={index}>  \r\n        <FormControlLabel\r\n          control={\r\n            <Checkbox\r\n              name=\"checkedB\"\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label={declarant.name}\r\n        />\r\n      </Box>\r\n      )\r\n    })\r\n  } else {\r\n    renderDeclarants = null\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root} >\r\n      <Container maxWidth=\"md\" className={classes.declarantsBlock} >\r\n        <Typography variant=\"h4\">Заявники</Typography>\r\n\r\n        {renderDeclarants}\r\n        <Box className={classes.Button}>\r\n          <Button onClick={() => setVisibleForm(!visibleForm)}variant=\"outlined\" color=\"primary\">\r\n          Додати<AddIcon fontSize=\"small\"></AddIcon>\r\n          </Button>\r\n        </Box>\r\n\r\n        <NewDeclartant visibleForm={visibleForm} setVisibleForm={setVisibleForm}/>\r\n        \r\n        <Box className={classes.Button}>\r\n          <Button onClick={saveHandler} variant=\"contained\" color=\"primary\" href=\"#contained-buttons\">\r\n            Зберігти заявку\r\n          </Button>\r\n        </Box>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeclarantsBlock;","import ClientBlock from './components/ClientBlock'\nimport DeclarantsBlock from './components/DeclarantsBlock'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <ClientBlock />\n      <DeclarantsBlock />\n    </div>\n  );\n}\n\nexport default App;\n","import { call, put, takeEvery, select } from 'redux-saga/effects'\r\nimport { FETCH_ClIENTS, REQUEST_ClIENTS, REQUEST_DECLARANTS, FETCH_DECLARANTS } from './types'\r\nimport {getClientState} from '../redux/reducers/rootReducer'\r\n\r\nconst data = {\r\n  access_token: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpYXQiOjE2MDk5MzM1ODMsImV4cCI6MTYxMjUyNTU4Mywicm9sZXMiOlsiUk9MRV9BRE1JTiJdLCJ1c2VybmFtZSI6ImJ5Lmhhc2tlbGwifQ.oa-YaDO-4UKGP9Z_IjIQRQfKQ6cgRrpNLSr71Si0YKhFUOAVGqQWmQgHkKj8PLBtdCBKr5ERNcoBagvw7C8QkdLd3Ruoks2VxOd7DDkj6WnAEqeEcc9WVOpEjFuIOWXVRDhwK1KtwwOd9jjd5I93EY8SNi5zvf6AV0oOJ4xETIoOWFuYLT0-KxgJYn8JPwErAQNpHyaLVBTHRB0dNk8NF7C3imKGzHxDX5zijpV5HwX1PSg8AT0DVSSu568B7DqLuQlFVcwRJme3JfpeaJP9YbYZTxyMMvIP3Pi4PqmEendySc8DAzCWWSYytfqvpTleqRIFgEEkG1nRU4Muu42bPYGLW5VnHIGiR3wgWc0rlkfae9pIXFrhEGvkD3eOyvTGnvD3YjAXsTQU2M_0PA6HP2i96eTnZO5noT3jnFWl3VYvqNLLpdeVgqNAFMmS8h9dLoDdux9mVh8q86Yg8mG4tk99ZCyVVdsYuUsVCwPneVjBXUxDfvqFpj-ItJx_hSZAydOhXvkFPdu4vgrHfWY6FMM0W-fFyHxV2gkiah5NMvYMAW1JlXSDIm2ZO64kF4kIvN3heFp17NWXxPhMDkrtrjDsWypHVhvw2ROljLCuiEoT7nOIvbsIek3eTqLmnRj3AyLmHSHxZPu0-W182m3Q8RJzhzj3aJe6RIAHRAxSCgs\",\r\n\ttoken_type: \"Bearer\"\r\n}\r\nlet currentClient;\r\n\r\nexport function* mySaga() {\r\n  yield takeEvery(REQUEST_ClIENTS, clientsWorker);\r\n  yield takeEvery(REQUEST_DECLARANTS, declarantsWorker);\r\n}\r\n\r\nfunction* clientsWorker() {\r\n  const payload = yield call(fetchClients)\r\n  yield put({ type: FETCH_ClIENTS, payload })\r\n}\r\n\r\nasync function fetchClients() {\r\n  const responce = await fetch('https://lexberry.com.ua/api/v1/clients', {\r\n    method: 'GET',\r\n    headers: {\r\n\t\t\t'Authorization': data.token_type + ' ' + data.access_token,\r\n\t\t}\r\n  })\r\n  const clientsItems = await responce.json()\r\n  return clientsItems.items\r\n}\r\n\r\n\r\nfunction* declarantsWorker() {\r\n  currentClient = yield select(getClientState);\r\n  yield call(fetchDeclarants)\r\n  const payload = yield call(fetchDeclarants)\r\n  yield put({ type: FETCH_DECLARANTS, payload })\r\n}\r\n\r\nasync function fetchDeclarants() {\r\n  const responce = await fetch(` https://lexberry.com.ua/api/v1/applicants?filter[client:id]=${currentClient.id}`, {\r\n    method: 'GET',\r\n    headers: {\r\n\t\t\t'Authorization': data.token_type + ' ' + data.access_token,\r\n\t\t}\r\n  })\r\n  const clientsItems = await responce.json()\r\n  return clientsItems.items\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FETCH_ClIENTS, SET_CURRENT_ClIENT } from '../types'\r\n\r\nconst initialState = {\r\n  clients: [],\r\n  client: null\r\n}\r\n\r\nexport const clientsReducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case FETCH_ClIENTS:\r\n      return {...state, clients: action.payload}\r\n    case SET_CURRENT_ClIENT:\r\n      return {...state, client: action.payload}\r\n    default: return state\r\n  }\r\n}","import { FETCH_DECLARANTS, PUSH_NEW_DECLARANT, UPDATE_CURRENT_NEW_DECLARANT, UPDATE_NEW_DECLARANTS_ARRAY } from '../types'\r\n\r\nconst initialState = {\r\n  declarants: [],\r\n  newDeclarants: [],\r\n  currentNewDerclarant: {}\r\n}\r\n\r\nexport const declarantsReducer = (state = initialState, action) => {\r\n  switch(action.type) {             \r\n    case FETCH_DECLARANTS:\r\n      return {...state, declarants: action.payload}\r\n    case PUSH_NEW_DECLARANT:\r\n      return {...state, declarants: state.declarants.concat([action.payload])}\r\n    case UPDATE_NEW_DECLARANTS_ARRAY:\r\n      return {...state, newDeclarants: state.newDeclarants.concat([action.payload])}\r\n    case UPDATE_CURRENT_NEW_DECLARANT:\r\n      return {...state, currentNewDerclarant: action.payload}\r\n    default: return state\r\n  }\r\n}","import {combineReducers} from 'redux'\r\nimport {clientsReducer} from './clientsReducer'\r\nimport {declarantsReducer} from './declarantsReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n  clients: clientsReducer,\r\n  declarants: declarantsReducer\r\n})\r\n\r\nexport const getClientState = (state) => state.clients.client","import React from 'react';\nimport {createStore, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport { render } from '@testing-library/react';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {rootReducer} from './redux/reducers/rootReducer';\nimport createSagaMiddleware from 'redux-saga'\nimport {mySaga} from './redux/sagas'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer, composeWithDevTools(\n    applyMiddleware(\n      sagaMiddleware\n    )\n  )\n)\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nsagaMiddleware.run(mySaga)\n\nrender(app, document.getElementById('root'))\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}